line 1059
 // std::cout << "\t\033[1;37m[-------------------- [" << std::setw(40) << std::left << " size method "
    //           << "] --------------------]\t\t\033[0m";
    // {
    //     /*-------------------------------------- time limit test -----------------------------------*/
    //     {
    //         time_t start, end, diff;
    //         /*------------------ std::maps ---------------------*/
    //         std::map<int, std::string> m1;
    //         ft::map<int, std::string> ft_m1;
    //         for (size_t i = 0; i < 1e6; i++)
    //         {
    //             m1.insert(std::make_pair(i, "string2"));
    //             ft_m1.insert(ft::make_pair(i, "string2"));
    //         }

    //         start = get_time();
    //         m1.size();
    //         end = get_time();
    //         diff = end - start;
    //         diff = (diff) ? (diff * TIME_FAC) : TIME_FAC;
    //         /*-----------------------------------------------------*/
    //         /*------------------ ft::Maps ---------------------*/
    //         ualarm(diff * 1e3, 0);
    //         ft_m1.size();
    //         ualarm(0, 0);
    //         /*----------------------------------------------------*/
    //     }
    //     /*------------------------------------------------------------------------------------------*/
    //     /*------------------ std::maps ---------------------*/
    //     std::map<int, std::string> m1; // fill constructor
    //     ft::map<int, std::string> ft_m1;
    //     for (size_t i = 0; i < 10; i++)
    //     {
    //         m1.insert(std::make_pair(i, "string2"));
    //         ft_m1.insert(ft::make_pair(i, "string2"));
    //     }

    //     std::map<int, std::string> m2;                         // empty constructor
    //     std::map<int, std::string> m3(m1.begin(), m1.end());   // range constructor with normal iterators
    //     std::map<int, std::string> m4(m3);                     // copy constructor
    //     std::map<int, std::string> m5(m1.rbegin(), m1.rend()); // range constructor with reverse iterators
    //     /*-----------------------------------------------------*/
    //     /*------------------ ft::Maps ---------------------*/
    //     ft::map<int, std::string> ft_m2;
    //     ft::map<int, std::string> ft_m3(ft_m1.begin(), ft_m1.end());
    //     ft::map<int, std::string> ft_m4(ft_m1);
    //     ft::map<int, std::string> ft_m5(ft_m1.rbegin(), ft_m1.rend());
    //     /*----------------------------------------------------*/
    //     EQUAL(m1.size() == ft_m1.size() && m2.size() == ft_m2.size() && m3.size() == ft_m3.size() && m5.size() == ft_m5.size() && m4.size() == ft_m4.size());
    // }